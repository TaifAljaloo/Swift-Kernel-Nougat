BB=/sbin/busybox;

# SQLite log location
LOGS=/sdcard/Synapse/Logs/SQLite.txt;

if [ "$($BB mount | grep rootfs | cut -c 26-27 | grep -c ro)" -eq "1" ]; then
	$BB mount -o remount,rw /;
fi;
if [ "$($BB mount | grep system | grep -c ro)" -eq "1" ]; then
	$BB mount -o remount,rw /system;
fi;

case $1 in
  reboot)
	$BB sync;
	$BB sleep 1;
	reboot $2;
  ;;
  cleardata)
	am force-stop com.af.synapse 2> /dev/null;
	$BB sleep 1;
	$BB rm -R /data/data/com.af.synapse/databases;
	$BB rm -R /data/data/com.af.synapse/cache;
	$BB sync;
	$BB sleep 1;
	/system/bin/reboot;
  ;;
  restart)
    	am force-stop com.af.synapse 2> /dev/null;
    	$BB sleep 1;
    	reset_uci;
	$BB sync;
    	$BB sleep 1;
    	am start -a android.intent.action.MAIN -n com.af.synapse/.MainActivity 2> /dev/null;
  ;;
  fix_wifi)
	svc wifi disable 2> /dev/null;
	rm -f /data/misc/dhcp/dhcpcd*;
	svc wifi enable 2> /dev/null;
	echo "WIFI Release Renew is DONE";
  ;;
  optimizedb)
	if [ -e $LOGS ]; then
		rm $LOGS;
	fi;

	# Create Log folder on sdcard
	LOG=/sdcard/Synapse/Logs;

	[ ! -d "$LOG" ] && mkdir -p "$LOG";
	chmod 755 $LOG

	echo "SQLite database VACUUM and REINDEX started at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOGS;

	for i in `$BB find /data -iname "*.db"`; do 
		sbin/sqlite3 $i 'VACUUM;' 2> /dev/null;
			resVac=$?
			if [ $resVac == 0 ]; then
				resVac="SUCCESS";
			else
				resVac="ERRCODE-$resVac";
			fi;
		sbin/sqlite3 $i 'REINDEX;' 2> /dev/null;
			resIndex=$?
			if [ $resIndex == 0 ]; then
				resIndex="SUCCESS";
			else
				resIndex="ERRCODE-$resIndex";
			fi;
		echo "Database $i:  VACUUM=$resVac  REINDEX=$resIndex" | tee -a $LOGS;
	done;

	for i in `$BB find /sdcard -iname "*.db"`; do
		sbin/sqlite3 $i 'VACUUM;' 2> /dev/null;
			resVac=$?
			if [ $resVac == 0 ]; then
				resVac="SUCCESS";
			else
				resVac="ERRCODE-$resVac";
			fi;
		sbin/sqlite3 $i 'REINDEX;' 2> /dev/null;
			resIndex=$?
			if [ $resIndex == 0 ]; then
				resIndex="SUCCESS";
			else
				resIndex="ERRCODE-$resIndex";
			fi;
		echo "Database $i:  VACUUM=$resVac  REINDEX=$resIndex" | tee -a $LOGS;
	done;
		echo "SQLite database VACUUM and REINDEX finished at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOGS;
		
	$BB echo "Databases have been optimized";
  ;;
  fstrim)
	echo -e "Trim /data"
	/sbin/fstrim -v /data
	echo -e ""
	echo -e "Trim /cache"
	/sbin/fstrim -v /cache
	echo -e ""
	echo -e "Trim /system"
	/sbin/fstrim -v /system
	echo -e ""
	$BB sync
  ;;
  wipe_cache_reboot)
	echo "0" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
	$BB rm -rf /cache/*
	$BB sync;
	$BB sleep 1;
	/system/bin/reboot;
  ;;
  wipe_dalvik_reboot)
	echo "0" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
	$BB rm -rf /data/dalvik-cache/*
	$BB sync;
	$BB sleep 1;
	/system/bin/reboot;
  ;;
  wipe_cache-dalvik_reboot)
	echo "0" > /sys/kernel/dyn_fsync/Dyn_fsync_active;
	$BB rm -rf /cache/*
	$BB rm -rf /data/dalvik-cache/*
	$BB sync;
	$BB sleep 1;
	/system/bin/reboot;
  ;;
  clean_up)
	$BB rm -rf /cache/lost+found/*
	$BB rm -rf /data/anr/*
	$BB rm -rf /data/clipboard/*
	$BB rm -rf /data/lost+found/*
	$BB rm -rf /data/system/dropbox/*
	$BB rm -rf /data/tombstones/*
	$BB sync;
	$BB sleep 1;
	echo "Clean up done";
  ;;
scr_cache)
  P=/res/synapse/SkyHigh/scr_cache
  if [ ! -z $2 ]; then
  if [ $2 == 0 ]; then
    echo 0 > $P
	setprop persist.sys.scrollingcache 0
  elif [ $2 == 1 ]; then
    echo 1 > $P
	setprop persist.sys.scrollingcache 1
  elif [ $2 == 2 ]; then
    echo 2 > $P
	setprop persist.sys.scrollingcache 2
  elif [ $2 == 3 ]; then
    echo 3 > $P
	setprop persist.sys.scrollingcache 3
  fi; fi
  copy=`cat $P`
  if [ $copy == 0 ]; then
    echo 0
  elif [ $copy == 1 ]; then
    echo 1
  elif [ $copy == 2 ]; then
    echo 2
  elif [ $copy == 3 ]; then
    echo 3
  fi
  ;;
spcm_service)
  P=/res/synapse/SkyHigh/spcm_service
  if [ ! -z $2 ]; then
  if [ $2 == Enabled ]; then
    echo Enabled > $P
	setprop sys.config.spcm_enable true
  elif [ $2 == Disabled ]; then
    echo Disabled > $P
	setprop sys.config.spcm_enable false
  fi; fi
  copy=`cat $P`
  if [ $copy == Enabled ]; then
    echo Enabled
  elif [ $copy == Disabled ]; then
    echo Disabled
  fi
  ;;
esac;

$BB mount -t rootfs -o remount,ro rootfs;
$BB mount -o remount,ro /system;
